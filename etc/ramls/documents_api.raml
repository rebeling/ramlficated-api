#%RAML 0.8
---
title: CRUD
version: 1.0
baseUri: http://localhost:5000/api/{version}

documentation:
  - title: Welcome
    content: |
      Welcome to the automagically generated api documentation.

  - title: Note
    content: |
      The npm module raml2html parse this raml-file and creates an html
      version of your api configuration. I am not satisfied with the
      raml2md-version, but html rocks already ;)


securitySchemes:
  - Unauthenticated: !include unauthenticated.raml
  - oauth_1_0:
      description: OAuth 1.0 continues to be supported for all API requests, but OAuth 2.0 is now preferred.
      type: OAuth 1.0
      settings:
        requestTokenUri: https://api.dropbox.com/1/oauth/request_token
        authorizationUri: https://www.dropbox.com/1/oauth/authorize
        tokenCredentialsUri: https://api.dropbox.com/1/oauth/access_token


traits:
  - searchable:
      queryParameters:
        q:
          description: Search query term. Search is performed on the document body and title.
          type: string
          minLength: 3
          default: "*:*"
        sort:
          description: Search results are sorted by their relevance to the query term (q). Use the sort parameter to sort by date.
          type: string
          default: relevance
        page:
          description: The page to return
          type: number
          default: 0
        page_size:
          description: The number of items per page
          type: number
          default: 10
      headers:
        TESTING:
          type: string
          description: does a trait render its headers?


/topsecrets:
  securedBy: [Unauthenticated]
  get:
    is: [searchable]
    description: Get the top secrets.


/documents:
  displayName: Documents CRUD
  get:
    description: Search for specific documents.
    is: [searchable]
    responses:
      200:
        body:
          application/json:
            example: !include data/document_examples.json
  post:
    description: Add document(s) to database.
    body:
      application/json:
        schema: !include data/document_schema.json
        example: !include data/document_examples.json
    responses:
      201:
        description: document(s) has been successfully created.
      409:
        description: document already exists.

  /{id}:
    displayName: document
    uriParameters:
      id:
        description: |
          document Identifier
        required: true
    get:
      description: Retrieve document-related information.
      responses:
        200:
          body:
            application/json:
              example: !include data/document_example.json
        404:
          description: Unable to find document with that identifier.
    put:
      description: Update document information.
      body:
        application/json:
          example: !include data/document_partial_example.json
      responses:
        204:
          description: |
            The document has been successfully updated.
        404:
          description: Unable to find document with that identifier.
    delete:
      description: Remove document from the catalog.
      responses:
        204:
          description: |
            The document has been successfully removed.
        404:
          description: Unable to find document with that identifier.
